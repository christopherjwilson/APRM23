p + ylim(c(0, 1))
# Plot a the p-values using ggplot2. use a scatterplot with the x-axis being the sample number and the y-axis being the p-value.
p+  geom_point() +
geom_hline(aes(yintercept = 0.05), color = "red", linetype = "dashed", size = 1) +
ggtitle("P-Values") +
xlab("Sample Number") +
ylab("P-Value")
library(gganimate)
p + transition_states(1:100) +
shadow_mark() +
enter_fade()
# Plot a the p-values using ggplot2. use a scatterplot with the x-axis being the sample number and the y-axis being the p-value.
p <- p+  geom_point() +
geom_hline(aes(yintercept = 0.05), color = "red", linetype = "dashed", size = 1) +
ggtitle("P-Values") +
xlab("Sample Number") +
ylab("P-Value")
library(gganimate)
p + transition_states(1:100) +
shadow_mark() +
enter_fade()
# Plot a the p-values using ggplot2. use a scatterplot with the x-axis being the sample number and the y-axis being the p-value.
p <- p+  geom_point() +
geom_hline(aes(yintercept = 0.05), color = "red", linetype = "dashed", size = 1) +
ggtitle("P-Values") +
xlab("Sample Number") +
ylab("P-Value")
library(gganimate)
p + transition_states(1:100, transition_length = 2) +
shadow_mark() +
enter_fade()
# Plot a the p-values using ggplot2. use a scatterplot with the x-axis being the sample number and the y-axis being the p-value.
p <- p+  geom_point() +
geom_hline(aes(yintercept = 0.05), color = "red", linetype = "dashed", size = 1) +
ggtitle("P-Values") +
xlab("Sample Number") +
ylab("P-Value")
library(gganimate)
p1 <- p + transition_states(1:100, transition_length = 2) +
shadow_mark() +
enter_fade()
animate(p1, fps = 5, duration = 10)
# generate a dataframe made of 2 vectors named Treatment and Control. Each vector has 1000 elements generated from a normal distribution with mean 0. Treatment has an SD of 3 and Control has an SD of 1.
treatment <- rnorm(1000, mean = 0, sd = 1)
control <- rnorm(1000, mean = 0, sd = 1.5)
data <- data.frame(treatment, control)
# plot a scatterplot of the data using ggplot2. reorganise the data into long format first.
library(ggplot2)
data_long <- data.frame(
group = c(rep("treatment", 1000), rep("control", 1000)),
value = c(treatment, control)
)
# show a scatterplot of the data with colour representing group membership
ggplot(data_long, aes(x = group, y = value, colour = group)) +
geom_jitter(width = 0.2, height = 0) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Group", y = "Score on measure")
# generate a dataframe made of 2 vectors named Treatment and Control. Each vector has 1000 elements generated from a normal distribution with mean 0. Treatment has an SD of 3 and Control has an SD of 1.
# plot a scatterplot of the data using ggplot2. reorganise the data into long format first.
library(ggplot2)
data_long <- data.frame(
group = c(rep("treatment", 1000), rep("control", 1000)),
value = c(treatment, control)
)
# Create 100 random samples of size 20 from the treatment and control vectors. Calculate the mean of each sample and store it in a vector called sample_means.
sample_mean_diffs <- c()
p_values <- c()
conf_int <- c()
cohens_d <- c()
for (i in 1:100) {
sample1 <- sample(data$treatment, size = 20)
sample2 <- sample(data$control, size = 20)
sample_mean_diffs[i] <- mean(sample1) - mean(sample2)
p_values[i] <- t.test(sample1, sample2)$p.value
conf_int[i] <- t.test(sample1, sample2)$conf.int[2] - t.test(sample1, sample2)$conf.int[1]
cohens_d[i] <- (mean(sample1) - mean(sample2)) / sqrt(((length(sample1) - 1) * var(sample1) + (length(sample2) - 1) * var(sample2)) / (length(sample1) + length(sample2) - 2))
}
# Plot a histogram of the sample means using ggplot2
library(ggplot2)
ggplot(data.frame(sample_mean_diffs), aes(x = sample_mean_diffs)) +
geom_histogram(binwidth = 0.5) +
geom_vline(aes(xintercept = mean(sample_mean_diffs)), color = "red", linetype = "dashed", size = 1) +
ggtitle("Histogram of Sample Mean Differences") +
xlab("Sample Mean Difference") +
ylab("Frequency")
p <- ggplot(data.frame(p_values), aes(x = 1:100, y = p_values)) +
geom_hline(aes(yintercept = 0.05), color = "red", linetype = "dashed", size = 1)
# set ylim to c(0, 1) to zoom in on the p-values
p + ylim(c(0, 1))
# Plot a the p-values using ggplot2. use a scatterplot with the x-axis being the sample number and the y-axis being the p-value.
p <- p+  geom_point() +
geom_hline(aes(yintercept = 0.05), color = "red", linetype = "dashed", size = 1) +
ggtitle("P-Values") +
xlab("Sample Number") +
ylab("P-Value")
library(gganimate)
p1 <- p + transition_states(1:100, transition_length = 2) +
shadow_mark() +
enter_fade()
animate(p1, fps = 5, duration = 20, end_pause = 10)
setwd("~/GitHub/aprm23/docs/slides")
write.csv(data, "popData.csv")
data <- read.csv("popData.csv")
View(data)
# generate a dataframe made of 2 vectors named Treatment and Control. Each vector has 1000 elements generated from a normal distribution with mean 0. Treatment has an SD of 3 and Control has an SD of 1.
# plot a scatterplot of the data using ggplot2. reorganise the data into long format first.
library(ggplot2)
data_long <- data.frame(
group = c(rep("treatment", 1000), rep("control", 1000)),
value = c(treatment, control)
)
# Create 100 random samples of size 20 from the treatment and control vectors. Calculate the mean of each sample and store it in a vector called sample_means.
sample_mean_diffs <- c()
p_values <- c()
conf_int <- c()
cohens_d <- c()
for (i in 1:100) {
sample1 <- sample(data$treatment, size = 20)
sample2 <- sample(data$control, size = 20)
sample_mean_diffs[i] <- mean(sample1) - mean(sample2)
p_values[i] <- t.test(sample1, sample2)$p.value
conf_int[i] <- t.test(sample1, sample2)$conf.int[2] - t.test(sample1, sample2)$conf.int[1]
cohens_d[i] <- (mean(sample1) - mean(sample2)) / sqrt(((length(sample1) - 1) * var(sample1) + (length(sample2) - 1) * var(sample2)) / (length(sample1) + length(sample2) - 2))
}
# Plot a histogram of the sample means using ggplot2
library(ggplot2)
ggplot(data.frame(sample_mean_diffs), aes(x = sample_mean_diffs)) +
geom_histogram(binwidth = 0.5) +
geom_vline(aes(xintercept = mean(sample_mean_diffs)), color = "red", linetype = "dashed", size = 1) +
ggtitle("Histogram of Sample Mean Differences") +
xlab("Sample Mean Difference") +
ylab("Frequency")
data_long <- data.frame(
group = c(rep("treatment", 1000), rep("control", 1000)),
value = c(treatment, control)
)
data_long <- data.frame(
group = c(rep("treatment", 1000), rep("control", 1000)),
value = c(treatment, control)
)
# generate a dataframe made of 2 vectors named Treatment and Control. Each vector has 1000 elements generated from a normal distribution with mean 0. Treatment has an SD of 3 and Control has an SD of 1.
#treatment <- rnorm(1000, mean = 0, sd = 1)
#control <- rnorm(1000, mean = 0, sd = 1.5)
#data <- data.frame(treatment, control)
#write.csv(data, "popData.csv")
data <- read.csv("popData.csv")
# plot a scatterplot of the data using ggplot2. reorganise the data into long format first.
library(ggplot2)
data_long <- data.frame(
group = c(rep("treatment", 1000), rep("control", 1000)),
value = c(treatment, control)
)
# show a scatterplot of the data with colour representing group membership
ggplot(data_long, aes(x = group, y = value, colour = group)) +
geom_jitter(width = 0.2, height = 0) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Group", y = "Score on measure")
# generate a dataframe made of 2 vectors named Treatment and Control. Each vector has 1000 elements generated from a normal distribution with mean 0. Treatment has an SD of 3 and Control has an SD of 1.
# plot a scatterplot of the data using ggplot2. reorganise the data into long format first.
# Create 100 random samples of size 20 from the treatment and control vectors. Calculate the mean of each sample and store it in a vector called sample_means.
sample_mean_diffs <- c()
p_values <- c()
conf_int <- c()
cohens_d <- c()
set.seed(123)
for (i in 1:100) {
sample1 <- sample(data$treatment, size = 20)
sample2 <- sample(data$control, size = 20)
sample_mean_diffs[i] <- mean(sample1) - mean(sample2)
p_values[i] <- t.test(sample1, sample2)$p.value
conf_int[i] <- t.test(sample1, sample2)$conf.int[2] - t.test(sample1, sample2)$conf.int[1]
cohens_d[i] <- (mean(sample1) - mean(sample2)) / sqrt(((length(sample1) - 1) * var(sample1) + (length(sample2) - 1) * var(sample2)) / (length(sample1) + length(sample2) - 2))
}
# Plot a histogram of the sample means using ggplot2
library(ggplot2)
ggplot(data.frame(sample_mean_diffs), aes(x = sample_mean_diffs)) +
geom_histogram(binwidth = 0.5) +
geom_vline(aes(xintercept = mean(sample_mean_diffs)), color = "red", linetype = "dashed", size = 1) +
ggtitle("Histogram of Sample Mean Differences") +
xlab("Sample Mean Difference") +
ylab("Frequency")
p <- ggplot(data.frame(p_values), aes(x = 1:100, y = p_values)) +
geom_hline(aes(yintercept = 0.05), color = "red", linetype = "dashed", size = 1)
# set ylim to c(0, 1) to zoom in on the p-values
p + ylim(c(0, 1))
# Plot a the p-values using ggplot2. use a scatterplot with the x-axis being the sample number and the y-axis being the p-value.
p <- p+  geom_point() +
geom_hline(aes(yintercept = 0.05), color = "red", linetype = "dashed", size = 1) +
ggtitle("P-Values") +
xlab("Sample Number") +
ylab("P-Value")
library(gganimate)
p1 <- p + transition_states(1:100, transition_length = 2) +
shadow_mark() +
enter_fade()
animate(p1, fps = 5, duration = 20, end_pause = 10)
set.seed(1232)
for (i in 1:100) {
sample1 <- sample(data$treatment, size = 20)
sample2 <- sample(data$control, size = 20)
sample_mean_diffs[i] <- mean(sample1) - mean(sample2)
p_values[i] <- t.test(sample1, sample2)$p.value
conf_int[i] <- t.test(sample1, sample2)$conf.int[2] - t.test(sample1, sample2)$conf.int[1]
cohens_d[i] <- (mean(sample1) - mean(sample2)) / sqrt(((length(sample1) - 1) * var(sample1) + (length(sample2) - 1) * var(sample2)) / (length(sample1) + length(sample2) - 2))
}
ggplot(data.frame(sample_mean_diffs), aes(x = sample_mean_diffs)) +
geom_histogram(binwidth = 0.5) +
geom_vline(aes(xintercept = mean(sample_mean_diffs)), color = "red", linetype = "dashed", size = 1) +
ggtitle("Histogram of Sample Mean Differences") +
xlab("Sample Mean Difference") +
ylab("Frequency")
# Plot a the p-values using ggplot2. use a scatterplot with the x-axis being the sample number and the y-axis being the p-value.
p <- p+  geom_point() +
geom_hline(aes(yintercept = 0.05), color = "red", linetype = "dashed", size = 1) +
ggtitle("P-Values") +
xlab("Sample Number") +
ylab("P-Value")
library(gganimate)
p1 <- p + transition_states(1:100, transition_length = 2) +
shadow_mark() +
enter_fade()
animate(p1, fps = 5, duration = 20, end_pause = 10)
p <- ggplot(data.frame(p_values), aes(x = 1:100, y = p_values)) +
geom_hline(aes(yintercept = 0.05), color = "red", linetype = "dashed", size = 1)
# set ylim to c(0, 1) to zoom in on the p-values
p + ylim(c(0, 1))
p <- p+  geom_point() +
geom_hline(aes(yintercept = 0.05), color = "red", linetype = "dashed", size = 1) +
ggtitle("P-Values") +
xlab("Sample Number") +
ylab("P-Value")
p
p
conf_int
confints <- data.frame(upper = conf_int + sample_mean_diffs, lower = sample_mean_diffs-conf_int))
confints <- data.frame(upper = conf_int + sample_mean_diffs, lower = sample_mean_diffs-conf_int)
confints
confints <- data.frame(upper = conf_int + sample_mean_diffs, lower = sample_mean_diffs-conf_int)
ggplot(confints, aes(x = 1, y = upper)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
geom_point(aes(y = sample_mean_diffs)) +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_flip() +
labs(x = "", y = "Mean difference") +
theme_classic() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank())
ggplot(confints, aes(x = 1, y = upper)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
geom_point(aes(y = sample_mean_diffs)) +
geom_hline(yintercept = 0, linetype = "dashed")
sample_mean_diffs
ggplot(data = confints, aes(x = 1:20, y = upper)) +
geom_point() +
geom_point(data = confints, aes(x = 1:20, y = lower)) +
geom_segment(data = confints, aes(x = 1:20, xend = 1:20, y = lower, yend = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(x = "Sample", y = "Mean difference") +
theme_classic()
ggplot(data = confints, aes(x = 1:100, y = upper)) +
geom_point() +
geom_point(data = confints, aes(x = 1:100, y = lower)) +
geom_segment(data = confints, aes(x = 1:100, xend = 1:100, y = lower, yend = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(x = "Sample", y = "Mean difference") +
theme_classic()
ggplot(data = confints, aes(x = 1:100, y = upper)) +
geom_point() +
geom_point(data = confints, aes(x = 1:100, y = lower)) +
geom_segment(data = confints, aes(x = 1:100, xend = 1:100, y = lower, yend = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(x = "Sample", y = "Mean difference") +
theme_classic() + coord_flip()
ggplot(data = confints, aes(x = 1:100, y = upper)) +
geom_point(aes(y = lower), colour = "red") +
geom_point() +
geom_hline(yintercept = 0, colour = "red") +
geom_hline(yintercept = mean(sample_mean_diffs), colour = "blue") +
labs(x = "Sample", y = "Mean difference") +
theme_classic() + coord_flip()
ggplot(data = confints, aes(x = 1:100, y = upper)) +
geom_point(aes(y = lower), colour = "red") +
geom_point() +
geom_hline(yintercept = 0, colour = "red") +
geom_hline(yintercept = mean(sample_mean_diffs), colour = "blue") +
labs(x = "Sample", y = "Mean difference") +
theme_classic()
ggplot(data = confints, aes(x = 1:100, y = upper)) +
geom_point(aes(y = lower), colour = "red") +
geom_point(aes(y = upper), colour = "blue") +
geom_hline(yintercept = 0, colour = "black") +
geom_hline(yintercept = sample_mean_diff, colour = "black", linetype = "dashed") +
coord_cartesian(ylim = c(-1, 1)) +
labs(x = "Sample number", y = "Mean difference") +
theme_classic()
ggplot(data = confints, aes(x = 1:100, y = upper)) +
geom_point(aes(y = lower), colour = "red") +
geom_point(aes(y = upper), colour = "blue") +
geom_hline(yintercept = 0, colour = "black") +
geom_hline(yintercept = sample_mean_diffs, colour = "black", linetype = "dashed") +
coord_cartesian(ylim = c(-1, 1)) +
labs(x = "Sample number", y = "Mean difference") +
theme_classic()
ggplot(data = confints, aes(x = 1:100, y = upper)) +
geom_point() +
geom_point(aes(y = lower)) +
geom_segment(aes(x = 1, xend = 100, y = upper, yend = upper)) +
geom_segment(aes(x = 1, xend = 100, y = lower, yend = lower)) +
geom_segment(aes(x = 1, xend = 1, y = lower, yend = upper)) +
geom_segment(aes(x = 100, xend = 100, y = lower, yend = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(x = "Sample", y = "Mean difference") +
theme_classic()
ggplot(data = confints, aes(x = 1:100, y = upper)) +
geom_point() +
geom_point(aes(y = lower)) +
geom_segment(aes(x = 1, xend = 100, y = upper, yend = upper)) +
geom_segment(aes(x = 1, xend = 100, y = lower, yend = lower)) +
geom_segment(aes(x = 1, xend = 1, y = lower, yend = upper)) +
geom_segment(aes(x = 100, xend = 100, y = lower, yend = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(x = "Sample", y = "Mean difference") +
theme_classic() coord_cartesian(ylim = c(-1, 1))
ggplot(data = confints, aes(x = 1:100, y = upper)) +
geom_point() +
geom_point(aes(y = lower)) +
geom_segment(aes(x = 1, xend = 100, y = upper, yend = upper)) +
geom_segment(aes(x = 1, xend = 100, y = lower, yend = lower)) +
geom_segment(aes(x = 1, xend = 1, y = lower, yend = upper)) +
geom_segment(aes(x = 100, xend = 100, y = lower, yend = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(x = "Sample", y = "Mean difference") +
theme_classic() coord_flip()
ggplot(data = confints, aes(x = 1:100, y = upper)) +
geom_point() +
geom_point(aes(y = lower)) +
geom_segment(aes(x = 1, xend = 100, y = upper, yend = upper)) +
geom_segment(aes(x = 1, xend = 100, y = lower, yend = lower)) +
geom_segment(aes(x = 1, xend = 1, y = lower, yend = upper)) +
geom_segment(aes(x = 100, xend = 100, y = lower, yend = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(x = "Sample", y = "Mean difference") +
theme_classic() + coord_flip()
ggplot(data = confints, aes(x = 1:100, y = upper)) +
geom_point()
ggplot(data = confints, aes(x = 1:100, y = 0:max(confints$upper))) +
geom_point()
ggplot(data = confints, aes(x = 1:100, y = 0:100)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper))
ggplot(data = confints, aes(x = 1:100, y = 1:100)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper))
ggplot(data = confints, aes(x = 1:100, y = seq(0,1, 0.01))) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper))
seq(0,1)
seq(0,1, 0.01)
seq(0.01,1, 0.01)
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper))
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_errorbar(aes(ymin = lower, ymax = upper))
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs)) +
geom_errorbar(aes(ymin = lower, ymax = upper))
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs)) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip()
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip()
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip() +
geom_text(aes(label = p_values), hjust = 0, vjust = 0.5, colour = "white")
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip() +
geom_text(aes(label = p_values), hjust = 0, size = 3, colour = "black")
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip() +
geom_text(aes(label = round(p_values, 2)), hjust = 0, size = 3, colour = "black")
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), hjust = 0, nudge_x = 0.01, colour = ifelse(confints$lower > 0 & confints$upper > 0, "blue", "red"))
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), hjust = 0, nudge_x = 0.01, colour = ifelse(p_values < 0.05, "blue", "red"))
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), hjust = 0, nudge_x = 0.01, colour = ifelse(p_values < 0.05, "blue", "red")) |> ggplotly()
ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), hjust = 0, nudge_x = 0.01, colour = ifelse(p_values < 0.05, "blue", "red")) |> plotly::ggplotly()
p2 <- ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), hjust = 0, nudge_x = 0.01, colour = ifelse(p_values < 0.05, "blue", "red"))
p2 + theme(legend.position = "none")
p2 |> plotly::ggplotly()
p2 <- ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), hjust = 0, nudge_x = 0.01, colour = ifelse(p_values < 0.05, "blue", "red"))
p2 <- p2 + theme(legend.position = "none")
p2 |> plotly::ggplotly()
p2 <- ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 1)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), position=position_jitter(width = 1, height = 1), colour = ifelse(p_values < 0.05, "blue", "red"))
p2 <- p2 + theme(legend.position = "none")
p2 |> plotly::ggplotly()
ggplot(data = confints, aes(x = seq(1,100,0.1), y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs)) +
geom_errorbar(aes(ymin = lower, ymax = upper)) + coord_flip()
p2 <- ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 1)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), position=position_jitter(width = 1, height = 1), colour = ifelse(p_values < 0.05, "blue", "red"))
p2 <- p2 + theme(legend.position = "none") + scale_x_discrete(expand=c(2, 0))
p2
p2 <- p2 + theme(legend.position = "none") + scale_y_discrete(expand=c(2, 0))
p2
p2 <- p2 + theme(legend.position = "none") + scale_y_discrete(expand=c(1, 0))
p2
p2 <- p2 + theme(legend.position = "none") + scale_y_discrete(expand=c(0.2, 0))
p2
p2 <- p2 + theme(legend.position = "none") + scale_y_discrete(expand=c(1, 0))
p2 <- ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 1)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), position=position_jitter(width = 1, height = 1), colour = ifelse(p_values < 0.05, "blue", "red"))
p2 <- p2 + theme(legend.position = "none") + scale_y_discrete(expand=c(1, 0))
p2 |> plotly::ggplotly()
p2 <- ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 1)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), position=position_jitter(width = 1, height = 1), colour = ifelse(p_values < 0.05, "blue", "red"))
p2 <- p2 + theme(legend.position = "none") + scale_y_discrete(expand=c(1.5, 0))
p2 |> plotly::ggplotly()
p2 <- ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 1)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), position=position_jitter(width = 1, height = 1), colour = ifelse(p_values < 0.05, "blue", "red"))
p2 <- p2 + theme(legend.position = "none") + scale_y_discrete(expand=c(2, 0))
p2 |> plotly::ggplotly()
p2 <- ggplot(data = confints, aes(x = 1:100, y = seq(0.01,1, 0.01))) +
geom_point(aes(y = sample_mean_diffs, colour = ifelse(lower > 0 & upper > 0, "blue", "red"))) +
geom_errorbar(aes(ymin = lower, ymax = upper, width = 1)) + coord_flip() +
geom_text(aes(label = round(p_values,2)), position=position_jitter(width = 1, height = 0.5), colour = ifelse(p_values < 0.05, "blue", "red"))
p2 <- p2 + theme(legend.position = "none") + scale_y_discrete(expand=c(2, 0))
p2 |> plotly::ggplotly()
p2
setwd("~/GitHub/aprm23/exercises")
c(1,2,3,4,5) %>% mean() %>% round(2)
library(dplyr)
c(1,2,3,4,5) %>% mean() %>% round(2)
c(1,2,3,4,5) |> mean() |> round(2)
df <- data.frame(age = rnorm(20, 50, 10), treatment = factor(sample(c("CBT", "ACT"), 20, replace = TRUE)), outcome = rnorm(20, 10, 2))
df <- data.frame(age = rnorm(20, 50, 10) |> round(0), treatment = factor(sample(c("CBT", "ACT"), 20, replace = TRUE)), outcome = rnorm(20, 10, 2))
View(df)
df <- data.frame(age = rnorm(20, 50, 10) |> round(0), treatment = factor(sample(c("CBT", "ACT"), 20, replace = TRUE)), outcome = rnorm(20, 10, 2) |> round(0)))
View(df)
df <- data.frame(age = rnorm(20, 50, 10) |> round(0), treatment = factor(sample(c("CBT", "ACT"), 20, replace = TRUE)), outcome = rnorm(20, 10, 2) |> round(0)))
View(df)
View(df)
df <- data.frame(age = rnorm(20, 50, 10) |> round(0), treatment = factor(sample(c("CBT", "ACT"), 20, replace = TRUE)), outcome = rnorm(20, 10, 2) |> round(0))
View(df)
round(mean(df$outcome), 2)
df %>%
select(outcome) %>%
mean() %>%
round(2)
df %>%
select(outcome) %>%
mean()
df %>%
pull(outcome) %>%
mean() %>%
round(2)
df$outcome %>% %>% mean() %>% round(2)
df$outcome  %>% mean() %>% round(2)
df$outcome  |> mean() |> round(2)
round(mean(df$outcome))
df$outcome |> mean() |> round()
data <- read.csv("practical2_data.csv")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
data |> filter(age > 20)
data |> filter(age > 18)
data_over_18 <- data |> filter(age > 18)
data_over_18 |> group_by(treatment_group) |> summarise( mean_outcome = mean(outcome), sd_outcome = sd(outcome)   )
data_over_18 |> group_by(treatment_group) |> summarise( mean_outcome = mean(outcome), sd_outcome = sd(outcome)   )
data_over_18 |> group_by(treatment_group) |> summarise( mean_outcome = mean(outcome), sd_outcome = sd(outcome)   )
summary_data <- data_over_18 |> group_by(treatment_group) |> summarise( mean_outcome = mean(outcome), sd_outcome = sd(outcome)   )
View(summary_data)
summary_data$sd_outcome
9.69 -5.21
View(data)
controlGroup <- data_over18 |> filter(treatment_group == "Control")
controlGroup <- data_over_18 |> filter(treatment_group == "Control")
