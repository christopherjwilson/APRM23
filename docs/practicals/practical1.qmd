---
title: Practical 1 Introduction to R and R Studio
author: "Dr. Christopher Wilson"
Subtitle: "PSY4179 Research Methods 1"
Institution: "Teesside University"
format:
  html:
    css: ["../include/style.css","../include/glossary.css","../include/booktem.css", "../include/webex.css"]
---

# Working with script files in R Studio

To work with R, it is possible to type commands directly into the console and see the results. However, this is not a good way to work with R, because:

1. You would need to repeat this process to run the analysis again.
1. Your analysis is not transparent - noone else can see what you did.

Instead, it is better to write scripts that contain the commands that you want to run amd save them, so they can be reused and shared with others.

## Create a folder for your data and scripts

Before you start, create a folder on your computer to store your data and scripts. This will make it easier to find your files later. You can call this folder anything you like, but it is a good idea to give it a name that is related to your project. For example, for this session, you might create a folder called **Practical1**.

::: {.callout-note} 
# Task 
Create a folder on your computer to store your data and scripts from this session.
:::

## Set the working directory

The working directory is the folder that R will look in for files. To set the working directory, click on the <inf>Session -> Set Working Directory -> Choose Directory</inf> and select the folder you created for your data and script.


::: {.callout-note} 
# Task 
Set the working directory to the folder you created for your data and scripts.
:::

## Create a new script file

To create a new script file, click on the <inf>File -> New File -> R Script</inf>. This will open a new window, which is where you will write your script. It is important to save your script as you work. To do this, click on the <inf>File -> Save As</inf> and give your script a name. It is a good idea to save your script in the same folder as your data.


::: {.callout-note} 
# Task 
Create a new script file called **Practical1* and save it in the folder you created for your data and scripts. It should have the extension .R - i.e.: *Practical1.R*.
:::

## Adding comments to a script

It is possible to add information to a script that will not be run as a command. This is called a comment. Comments are useful for adding information about what you are doing in your script. To add a comment, you need to start the line with a hash symbol (#). Anything after the hash symbol will be ignored by R. For example:
```r
# This is a comment

```

::: {.callout-note} 
# Task 

Write a comment in your script that describes what you are doing in this session. For example: "This script contains the commands for the first practical session in PSY4179 Research Methods 1".

:::

## Writing commands in a script 

In an R script, any text that is not a comment is a command. Commands are instructions that tell R to do something. 

For example:

```r

# Add two numbers together

23 + 52
```

The code above is a command that tells R to add 23 and 52. However, it will not do anything until you tell R to run it. 

::: {.callout-note} 
# Task 
Ask the ages of the people sitting next to you and add them together. Write the command in your script.
:::

## Running code in a script

To run code in a script, you can either highlight the code and click on the <inf>Run</inf> button, or you can use the keyboard shortcut <inf>Ctrl + Enter</inf>. This will run the code and print the results in the console.

::: {.callout-note} 
# Task 

If you have not already done so, run the code you wrote in the previous step.

:::

## Saving objects in R

When you run a command in R, you can save the results to an object. For example, when you run the command to add two numbers together, you can save this object by assigning it to a name. For example:

```r
# Add two numbers together

result <- 23 + 52
```

The code above is a command that tells R to add 23 and 52 and save the result to an object called **result**. You can save many things as objects including the results of analyses, data, and graphs.

::: {.callout-note} 
# Task 

Run the code you wrote in the previous step. Then, run the following command to print the object **ages** in the console.

:::

## Using functions in R

A function is a command that performs a specific task. For example, the function **mean()** calculates the mean of a set of numbers. To use a function, you need to provide it with some information. For example, to calculate the mean of a set of numbers, you need to tell the function which numbers to use. This is called an argument. For example:

```r
# Calculate the mean of my previous result

mean(result)

```

In the code above, the function **mean()** is used to calculate the mean of the object **result**. The object **result** is the argument for the function **mean()**.

::: {.callout-note} 
# Task 

1. Calculate the mean of the object **ages** and save it to an object called **mean_age**. Print the object **mean_age** in the console.

2. Use the sd() function to calculate the standard deviation of the object **ages** and save it to an object called **sd_age**. Print the object **sd_age** in the console.

3. Create a new object called **ages_doubled** that contains the object **ages** multiplied by 2. Print the object **ages_doubled** in the console. 

:::

::: {.callout-tip}
Note how each of the values in the ages_doubled object is twice the value of the corresponding value in the ages object.
:::

## Using packages in R

To install a package, you can use the <inf>install.packages()</inf> function. For example, to install the package **psych**, you would use the following command:

```r
install.packages("psych")
```

To load the package, you can use the <inf>library()</inf> function. For example, to load the package **psych**, you would use the following command:

```r
library(psych)
```

::: {.callout-note}
# Task
1. Install the package **psych**. We will use it in a later practical session.
2. Load the package **psych**.
:::

## Saving your script
Remember to save your script regularly as you work. To save your script, click on the <inf>File -> Save</inf> or use the keyboard shortcut <inf>Ctrl + S</inf>.

::: {.callout-note}
# Task
Save your script.
:::
