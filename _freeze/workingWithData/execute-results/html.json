{
  "hash": "3805dfb07105ce5e9a0355a99d77b40a",
  "result": {
    "markdown": "\n\n\n\n# Working with data in R\n\n<iframe src=\"https://teesside.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=4d1a880f-b435-465a-95a3-adaa00908325&autoplay=false&offerviewer=true&showtitle=true&showbrand=false&captions=false&interactivity=all\" height=\"405\" width=\"100%\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\"></iframe>\n\n## By the end of this section, you will be able to:\n- Import data into R from excel, SPSS and csv files\n- Save data to <a class='glossary'>object<span class='def'>A word that identifies and stores the value of some data for later use.</span></a>\n- Identify different data structures and <a class='glossary'>data types<span class='def'></span></a>\n- Convert <a class='glossary'>data types<span class='def'></span></a> from one type to another\n- Order, filter and group data\n- Summarise data\n- Create new <a class='glossary'>variables<span class='def'></span></a> or <a class='glossary'>objects<span class='def'>A word that identifies and stores the value of some data for later use.</span></a> from data\n\n\n## In this section, we will use the <pkg>Tidyverse</pkg> set of packages\n\n-\tA ‘toolkit’ of packages that are very useful for organsing and manipulating data\n- We will use the <pkg>haven</pkg> package to import SPSS files\n- We will use the <pkg>dplyr</pkg> to organise data\n- Also includes the <pkg>ggplot2</pkg> and <pkg>tidyR</pkg> packages which we will use later\n\nTo install: \n\n\n`install.packages(“tidyverse”)`\n\n(See the previous section on installing packages)\n\n## Import data into R from excel, SPSS and csv files\n\nWe can import data from a range of sources using the <if>Import Dataset<if> button in the <if>Environment<if> tab:\n\n![Importing data](images/importData.png)\n\nIt is also possible to import data using code, for example:\n\n\n`\n # importing a .csv file\n    \n    library(readr)\n    studentData <- read_csv(\"Datasets/studentData.csv\")\n\n\n    #importing an SPSS file\n    \n    library(haven)\n    mySPSSData <- read_sav(\"datasets/salesData.sav\")\n`\n\n   \n\nOnce the data are imported, it will be visible in the environment: \n\n![Imported data in the environment](images/environment.png)\n\n## Restructuring and reorganising data in R (long versus wide data)\n\n<iframe src=\"https://teesside.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=59c0876a-8047-401c-826a-aaec00cbb220&autoplay=false&offerviewer=true&showtitle=true&showbrand=false&start=0&interactivity=all\" height=\"405\" width=\"100%\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\"></iframe>\n\n## Understanding objects in R\n\nIn R, an <a class='glossary'>object<span class='def'>A word that identifies and stores the value of some data for later use.</span></a> is anything that is saved to memory. For example, we might do some analysis:\n\n`mean(happiness)`\n\n     \nHowever, in the example above, the result would appear in the console but not be saved anywhere. To store the result for reuse later, we save it to an object: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhappinessMean <- mean(happiness)\n```\n:::\n\n\n\nIn the above code (reading left to right):\n\n- We name the object \"happinessMean\". This name can be anything we want.\n- The arrow means that the result of the code on the right will be saved to the object on the left.\n- The code on the right of the arrow calculates the mean of *happiness* data   \n    \nWhen this code is run, *happinessMean* will be stored in the environment window:\n\n![Result of a calculation in the environment](images/saveobject.png)\n\nTo recall an object from the environment, we can simply type its name. For example:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n happinessMean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10.04546\n```\n:::\n:::\n\n \n    \n> Its important to note that anything can be stored as an object in R and recalled later. This includes, dataframes, the results of statistical calculations, plots etc.\n\n## Identify different <a class='glossary'>data structures<span class='def'></span></a> and variable types\n\n### Data structures (sometimes referred to as \"<a class='glossary'>data containers<span class='def'></span></a>\")\n\nThere are many different types of data structures that R can work with. The most common type of data for most people tends to be a <a class='glossary'>data frame<span class='def'></span></a>. A <a class='glossary'>data frame<span class='def'></span></a> is what you might consider a \"normal\" 2-dimensional dataset, with rows of data and columns of variables:\n\n![A dataframe example](images/dataframe.png)\n\nR can also use other data types.\n\nA <a class='glossary'>vector<span class='def'></span></a> is a one-dimensional set of values:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# a vector example\n\nscores <- c(1,4,6,8,3,4,6,7)\n```\n:::\n\n\nA <a class='glossary'>matrix<span class='def'></span></a> is a multi-dimensional set of values. The below example is a 3-dimensional matrix, there are 2 groups of 2 rows and 3 columns:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12\n```\n:::\n:::\n\n\n> We will primarily work with dataframes (and sometimes vectors), as this is how the data in psychology research is usually structured.\n\n### Data types\n\nWith numerical data, there are 4 key <a class='glossary'>data types<span class='def'></span></a>:\n\n- <a class='glossary'>factor (data type)<span class='def'></span></a> or nominal (a category, group or factor)\n- <a class='glossary'>ordinal<span class='def'>Discrete variables that have an inherent order, such as level of education or dislike/like.</span></a> (a ranking)\n- <a class='glossary'>interval (data type)<span class='def'></span></a> (scale data that can include negative values)\n- <a class='glossary'>ratio (data type)<span class='def'></span></a> (scale data that cannot include negative values)\n\n![Numerical data types](images/dataTypes.png)\nR can use all of these variable types:\n\n\n- **Nominal** variables are called **factors**\n- **Ordinal** variables are called **ordered factors**\n- **Interval and ratio** variables are called **numeric** data and can sometimes be called integers (if they are only whole numbers) or doubles (if they all have decimal points)\n\nR can also use other data types such as text (<a class='glossary'>character<span class='def'>A data type representing strings of text.</span></a>) data.\n\n### Convert variables from one data type to another\n\nWhen we first import data into R, it might not recognise the data types correctly. For example, in the below data, we can see the **intervention** variable :\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| participant| intervention| happiness|\n|-----------:|------------:|---------:|\n|           3|            2|  8.884138|\n|           2|            1|  8.953619|\n|           5|            2|  9.155492|\n|           7|            1|  9.208114|\n|          18|            1|  9.287217|\n|           6|            2|  9.309517|\n|           1|            2|  9.568321|\n|           8|            2|  9.819477|\n|          16|            1|  9.849244|\n|          17|            1|  9.882446|\n\n</div>\n:::\n:::\n\nIn the **intervention** variable, the numbers 1 and 2 refer to different intervention groups. Therefore, the variable is a <a class='glossary'>factor (data type)<span class='def'></span></a> variable. To ensure that R understands this, we can resave the intervention variable as a factor using the `as.factor()` function:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhappinessSample$intervention <- as.factor(happinessSample$intervention)\n```\n:::\n\n\n\n## Working with dataframes\n\n<a class='glossary'>Dataframes<span class='def'></span></a> are the more standard data format that were are used to (think of how a dataset looks in SPSS or Excel).\n\nIn a <a class='glossary'>dataframe<span class='def'></span></a>, variables are columns and each row usually reperesents one measurement or one participant.\n\n### View dataframe\n\nTo view a dataframe, we can click on it in the <inf>environment</inf> window and it will display:\n\n![Clicking on datasets in hte environment will open them up for viewing](images/environment.png)\n\n![Viewing a dataframe](images/dataframe.png)\n\n### Refer to variables (columns) in a dataframe\n\nColumns in a dataframe are accessed using the \"$\" sign. For example, to access the *happiness* column in the *happinessSample* dataframe, we would type:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhappinessSample$happiness\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  9.568322  8.953619  8.884138 12.249988  9.155492  9.309517  9.208114\n [8]  9.819477 10.016804 11.094374 10.302998 10.800649 10.141901 10.365840\n[15] 10.052093  9.849244  9.882446  9.287217 11.251772 10.715134\n```\n:::\n:::\n\n\nAs we can see above, the result is then displayed.\n\n## Order, filter and group data\n\nIf you have the <pkg>tidyverse</pkg> package loaded, it is easy to organise and filter data.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\narrange(happinessSample, happiness)\narrange(happinessSample, desc(happiness)) # Arrange in descending order\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| participant|intervention | happiness|\n|-----------:|:------------|---------:|\n|           3|2            |  8.884138|\n|           2|1            |  8.953619|\n|           5|2            |  9.155492|\n|           7|1            |  9.208114|\n|          18|1            |  9.287217|\n|           6|2            |  9.309517|\n|           1|2            |  9.568321|\n|           8|2            |  9.819477|\n|          16|1            |  9.849244|\n|          17|1            |  9.882446|\n|           9|2            | 10.016804|\n|          15|2            | 10.052093|\n|          13|1            | 10.141901|\n|          11|1            | 10.302998|\n|          14|1            | 10.365840|\n|          20|1            | 10.715134|\n|          12|1            | 10.800649|\n|          10|1            | 11.094374|\n|          19|2            | 11.251772|\n|           4|1            | 12.249988|\n\n</div><div class=\"kable-table\">\n\n| participant|intervention | happiness|\n|-----------:|:------------|---------:|\n|           4|1            | 12.249988|\n|          19|2            | 11.251772|\n|          10|1            | 11.094374|\n|          12|1            | 10.800649|\n|          20|1            | 10.715134|\n|          14|1            | 10.365840|\n|          11|1            | 10.302998|\n|          13|1            | 10.141901|\n|          15|2            | 10.052093|\n|           9|2            | 10.016804|\n|          17|1            |  9.882446|\n|          16|1            |  9.849244|\n|           8|2            |  9.819477|\n|           1|2            |  9.568321|\n|           6|2            |  9.309517|\n|          18|1            |  9.287217|\n|           7|1            |  9.208114|\n|           5|2            |  9.155492|\n|           2|1            |  8.953619|\n|           3|2            |  8.884138|\n\n</div>\n:::\n:::\n\n\n- Show clients with a happiness score of less than 4\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfilter(happinessSample, happiness < 4)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| participant|intervention | happiness|\n|-----------:|:------------|---------:|\n\n</div>\n:::\n:::\n\n\n- Show Intervention group 2 with happiness scores above 7\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfilter(happinessSample, happiness > 7 & intervention == 2)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| participant|intervention | happiness|\n|-----------:|:------------|---------:|\n|           1|2            |  9.568321|\n|           3|2            |  8.884138|\n|           5|2            |  9.155492|\n|           6|2            |  9.309517|\n|           8|2            |  9.819477|\n|           9|2            | 10.016804|\n|          15|2            | 10.052093|\n|          19|2            | 11.251772|\n\n</div>\n:::\n:::\n\n\n- Group by intervention and show the mean happiness score\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhappinessSample %>% group_by(intervention) %>% summarise(mean = mean(happiness))\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|intervention |      mean|\n|:------------|---------:|\n|1            | 10.237627|\n|2            |  9.757202|\n\n</div>\n:::\n:::\n\n\n\n## Create new variables / objects from data\n\nTo create new variables from data, we can use the **mutate()** function.\n\nFor example, let's say we wanted to calculate the difference between each person's happiness score and the mean happiness score.\n\nWe could do the following:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhappinessSample %>% mutate(difference = happiness - mean(happiness))\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| participant|intervention | happiness| difference|\n|-----------:|:------------|---------:|----------:|\n|           1|2            |  9.568321| -0.4771354|\n|           2|1            |  8.953619| -1.0918382|\n|           3|2            |  8.884138| -1.1613193|\n|           4|1            | 12.249988|  2.2045312|\n|           5|2            |  9.155492| -0.8899646|\n|           6|2            |  9.309517| -0.7359397|\n|           7|1            |  9.208114| -0.8373426|\n|           8|2            |  9.819477| -0.2259801|\n|           9|2            | 10.016804| -0.0286524|\n|          10|1            | 11.094374|  1.0489167|\n|          11|1            | 10.302998|  0.2575412|\n|          12|1            | 10.800649|  0.7551924|\n|          13|1            | 10.141901|  0.0964439|\n|          14|1            | 10.365840|  0.3203833|\n|          15|2            | 10.052093|  0.0066357|\n|          16|1            |  9.849244| -0.1962134|\n|          17|1            |  9.882446| -0.1630112|\n|          18|1            |  9.287217| -0.7582398|\n|          19|2            | 11.251772|  1.2063154|\n|          20|1            | 10.715134|  0.6696768|\n\n</div>\n:::\n:::\n",
    "supporting": [
      "workingWithData_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}