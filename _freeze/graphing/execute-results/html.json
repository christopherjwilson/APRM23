{
  "hash": "521defc50a8538a9f7b9c6901e24e1e4",
  "result": {
    "markdown": "\n\n# Graphing and data visualisation with R\n\n## Presenting data visually\n\n<iframe src=\"https://teesside.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1e941396-d607-40cb-8a4e-adaa008f9c64&autoplay=false&offerviewer=true&showtitle=true&showbrand=false&captions=false&interactivity=all\" height=\"405\" width=\"100%\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\"></iframe>\n\n## Using GGplot to make graphs\n\n<iframe src=\"https://teesside.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=811ce074-1306-451d-94b5-af41010574ec&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all\" height=\"405\" width=\"100%\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\"></iframe>\n\n## By the end of this section, you will be able to:\n \n\n- Describe the ggplot \"grammar of visualisation\": coordinates and geoms\n- Write a graph function to display multiple variables on a plot\n- Amend the titles and legends of a plot\n- Save plots in PDF or image formats\n\n\n\n\n\n## The \"grammar of visualisation\"\n\n \n- Graphs are made up of 3 components:\n    * A dataset\n    * A coordinate system\n    * Visual marks to represent data __(geoms)__\n\nThe \"grammar of visualisation\" #2\n \n\n ::: {.cell layout-align=\"center\"}\n ::: {.cell-output-display}\n ![](img/ggplot1.png){fig-align='center' width=100%}\n :::\n :::\n\n  \n  - In the above example, the dataset is the _studentData_ that we used previously.\n  - The _grades_ variable is mapped to the X axis\n  - The _hoursOfStudy_ variable is mapped to the Y axis\n\n## How to code a graph\n\n\n- The graph is created using the following code:\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/ggplot2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n- In this code, we specify the dataset, the variables for the X and Y axes and the __geom__ that will represent the data points visually (in this case, each datum is a point)\n\n## The graph output\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data=studentData, aes(x=grades,y=hoursOfStudy)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](graphing_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Changing the geoms leads to different visualisations\n\n\n- If we change from points to lines, for example we get a different plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data=studentData, aes(x=grades,y=hoursOfStudy)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](graphing_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## It is possible to represent more variables on the plot\n\n\n- By specifying that colours of our points should be attached to the __route__ variable, the data is now colour-coded\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data=studentData, aes(x=grades,y=hoursOfStudy)) + geom_point(aes(color = route))\n```\n\n::: {.cell-output-display}\n![](graphing_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## It is possible to represent more variables on the plot #2\n\n- By specifying that size of our points should be attached to the __satisfactionLevel__ variable, the size of the points adjusts\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data=studentData, aes(x=grades,y=hoursOfStudy)) + geom_point(aes(color = route, size=satisfactionLevel))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using size for a discrete variable is not advised.\n```\n:::\n\n::: {.cell-output-display}\n![](graphing_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## It is possible to represent more variables on the plot #3\n\n\n- By specifying that shape of our points should be attached to the __hasDependents__ variable, the shape of the points changes accordingly\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data=studentData, aes(x=grades,y=hoursOfStudy)) + geom_point(aes(color = route, size=satisfactionLevel, shape=hasDepdendants))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using size for a discrete variable is not advised.\n```\n:::\n\n::: {.cell-output-display}\n![](graphing_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Plotting summaries of data\n\n- We can summarise the data (e.g. get the mean or sd) using the *stat_summary()* function\n- Below we are making a bar chart with the mean grade for each route\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=studentData, aes(x=route, y= grades, fill=route)) + stat_summary(fun.y = \"mean\", geom = \"bar\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nâ„¹ Please use the `fun` argument instead.\n```\n:::\n\n::: {.cell-output-display}\n![](graphing_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Changing the axis labels and title on a plot\n\nWe can change the axis labels and title using the __labs()__ command:\n\n    labs(x=\"Student Grade\", y=\"Hours of Study\", title = \"Scattterplot of student data\")\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data=studentData, aes(x=grades,y=hoursOfStudy)) + geom_point(aes(color = route, size=satisfactionLevel, shape=hasDepdendants)) + labs(x=\"Student Grade\", y=\"Hours of Study\", title = \"Scattterplot of studentdata\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using size for a discrete variable is not advised.\n```\n:::\n\n::: {.cell-output-display}\n![](graphing_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Changing the legend on a plot\n\n\nTo change the legend, we use the __labs()__ command too, and reference the relevant property (e.g. size, shape, colour)\n\n    labs(x=\"Student Grade\", y=\"Hours of Study\", title = \"Scattterplot of student data\", color=\"Route of study\", size=\"Satisfaction level\", shape=\"Has dependents?\")\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n  ggplot(data=studentData, aes(x=grades,y=hoursOfStudy)) + \n    geom_point(aes(color = route, size=satisfactionLevel, shape=hasDepdendants)) +\n  labs(x=\"Student Grade\", y=\"Hours of Study\", title = \"Scattterplot of studentdata\", color=\"Route of study\", size=\"Satisfaction level\", shape=\"Has dependents?\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using size for a discrete variable is not advised.\n```\n:::\n\n::: {.cell-output-display}\n![](graphing_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Storing plots to be recalled later\n\n- Plots can be assigned to objects in R and recalled later, just like any other piece of data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n## Create plot and store it as \"myPlot\" object\n\nmyPlot <- ggplot(data=studentData, aes(x=grades,y=hoursOfStudy)) +\n  geom_point(aes(color = route, size=satisfactionLevel, shape=hasDepdendants)) +\n  labs(x=\"Student Grade\", y=\"Hours of Study\", title = \"Scattterplot of studentdata\", color=\"Route of study\", size=\"Satisfaction level\", shape=\"Has dependents?\")\n```\n:::\n\n\n## Recalling a stored plot\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n #Recall myPlot\nmyPlot\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using size for a discrete variable is not advised.\n```\n:::\n\n::: {.cell-output-display}\n![](graphing_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Saving plots # 1\n\n\n- Plots can be save using the __export__ button in the plots tab\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/savePlot1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Plots can also be saved using code\n\n\n- You might want to include code to save your plot in a script, for example\n- This can allow greater control over the output file and plot dimensions:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggsave(plot= myPlot, file=\"myPlot.pdf\", width = 4, height = 4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using size for a discrete variable is not advised.\n```\n:::\n\n```{.r .cell-code}\nggsave(plot= myPlot, file=\"myPlot.png\", width = 4, height = 4, units=\"cm\", dpi=320)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using size for a discrete variable is not advised.\n```\n:::\n:::\n",
    "supporting": [
      "graphing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}